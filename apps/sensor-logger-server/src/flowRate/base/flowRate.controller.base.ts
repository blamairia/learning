/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FlowRateService } from "../flowRate.service";
import { FlowRateCreateInput } from "./FlowRateCreateInput";
import { FlowRate } from "./FlowRate";
import { FlowRateFindManyArgs } from "./FlowRateFindManyArgs";
import { FlowRateWhereUniqueInput } from "./FlowRateWhereUniqueInput";
import { FlowRateUpdateInput } from "./FlowRateUpdateInput";

export class FlowRateControllerBase {
  constructor(protected readonly service: FlowRateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FlowRate })
  async createFlowRate(
    @common.Body() data: FlowRateCreateInput
  ): Promise<FlowRate> {
    return await this.service.createFlowRate({
      data: {
        ...data,

        sensor: data.sensor
          ? {
              connect: data.sensor,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        rate: true,

        sensor: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FlowRate] })
  @ApiNestedQuery(FlowRateFindManyArgs)
  async flowRates(@common.Req() request: Request): Promise<FlowRate[]> {
    const args = plainToClass(FlowRateFindManyArgs, request.query);
    return this.service.flowRates({
      ...args,
      select: {
        createdAt: true,
        id: true,
        rate: true,

        sensor: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FlowRate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async flowRate(
    @common.Param() params: FlowRateWhereUniqueInput
  ): Promise<FlowRate | null> {
    const result = await this.service.flowRate({
      where: params,
      select: {
        createdAt: true,
        id: true,
        rate: true,

        sensor: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FlowRate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFlowRate(
    @common.Param() params: FlowRateWhereUniqueInput,
    @common.Body() data: FlowRateUpdateInput
  ): Promise<FlowRate | null> {
    try {
      return await this.service.updateFlowRate({
        where: params,
        data: {
          ...data,

          sensor: data.sensor
            ? {
                connect: data.sensor,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          rate: true,

          sensor: {
            select: {
              id: true,
            },
          },

          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FlowRate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFlowRate(
    @common.Param() params: FlowRateWhereUniqueInput
  ): Promise<FlowRate | null> {
    try {
      return await this.service.deleteFlowRate({
        where: params,
        select: {
          createdAt: true,
          id: true,
          rate: true,

          sensor: {
            select: {
              id: true,
            },
          },

          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
