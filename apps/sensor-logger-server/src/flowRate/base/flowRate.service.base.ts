/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  FlowRate as PrismaFlowRate,
  Sensor as PrismaSensor,
} from "@prisma/client";

export class FlowRateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FlowRateCountArgs, "select">): Promise<number> {
    return this.prisma.flowRate.count(args);
  }

  async flowRates(
    args: Prisma.FlowRateFindManyArgs
  ): Promise<PrismaFlowRate[]> {
    return this.prisma.flowRate.findMany(args);
  }
  async flowRate(
    args: Prisma.FlowRateFindUniqueArgs
  ): Promise<PrismaFlowRate | null> {
    return this.prisma.flowRate.findUnique(args);
  }
  async createFlowRate(
    args: Prisma.FlowRateCreateArgs
  ): Promise<PrismaFlowRate> {
    return this.prisma.flowRate.create(args);
  }
  async updateFlowRate(
    args: Prisma.FlowRateUpdateArgs
  ): Promise<PrismaFlowRate> {
    return this.prisma.flowRate.update(args);
  }
  async deleteFlowRate(
    args: Prisma.FlowRateDeleteArgs
  ): Promise<PrismaFlowRate> {
    return this.prisma.flowRate.delete(args);
  }

  async getSensor(parentId: string): Promise<PrismaSensor | null> {
    return this.prisma.flowRate
      .findUnique({
        where: { id: parentId },
      })
      .sensor();
  }
}
