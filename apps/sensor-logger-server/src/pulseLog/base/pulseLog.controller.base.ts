/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PulseLogService } from "../pulseLog.service";
import { PulseLogCreateInput } from "./PulseLogCreateInput";
import { PulseLog } from "./PulseLog";
import { PulseLogFindManyArgs } from "./PulseLogFindManyArgs";
import { PulseLogWhereUniqueInput } from "./PulseLogWhereUniqueInput";
import { PulseLogUpdateInput } from "./PulseLogUpdateInput";

export class PulseLogControllerBase {
  constructor(protected readonly service: PulseLogService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PulseLog })
  async createPulseLog(
    @common.Body() data: PulseLogCreateInput
  ): Promise<PulseLog> {
    return await this.service.createPulseLog({
      data: {
        ...data,

        sensor: data.sensor
          ? {
              connect: data.sensor,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        pulseCount: true,

        sensor: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PulseLog] })
  @ApiNestedQuery(PulseLogFindManyArgs)
  async pulseLogs(@common.Req() request: Request): Promise<PulseLog[]> {
    const args = plainToClass(PulseLogFindManyArgs, request.query);
    return this.service.pulseLogs({
      ...args,
      select: {
        createdAt: true,
        id: true,
        pulseCount: true,

        sensor: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PulseLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async pulseLog(
    @common.Param() params: PulseLogWhereUniqueInput
  ): Promise<PulseLog | null> {
    const result = await this.service.pulseLog({
      where: params,
      select: {
        createdAt: true,
        id: true,
        pulseCount: true,

        sensor: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PulseLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePulseLog(
    @common.Param() params: PulseLogWhereUniqueInput,
    @common.Body() data: PulseLogUpdateInput
  ): Promise<PulseLog | null> {
    try {
      return await this.service.updatePulseLog({
        where: params,
        data: {
          ...data,

          sensor: data.sensor
            ? {
                connect: data.sensor,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          pulseCount: true,

          sensor: {
            select: {
              id: true,
            },
          },

          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PulseLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePulseLog(
    @common.Param() params: PulseLogWhereUniqueInput
  ): Promise<PulseLog | null> {
    try {
      return await this.service.deletePulseLog({
        where: params,
        select: {
          createdAt: true,
          id: true,
          pulseCount: true,

          sensor: {
            select: {
              id: true,
            },
          },

          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
