/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PulseLog } from "./PulseLog";
import { PulseLogCountArgs } from "./PulseLogCountArgs";
import { PulseLogFindManyArgs } from "./PulseLogFindManyArgs";
import { PulseLogFindUniqueArgs } from "./PulseLogFindUniqueArgs";
import { CreatePulseLogArgs } from "./CreatePulseLogArgs";
import { UpdatePulseLogArgs } from "./UpdatePulseLogArgs";
import { DeletePulseLogArgs } from "./DeletePulseLogArgs";
import { Sensor } from "../../sensor/base/Sensor";
import { PulseLogService } from "../pulseLog.service";
@graphql.Resolver(() => PulseLog)
export class PulseLogResolverBase {
  constructor(protected readonly service: PulseLogService) {}

  async _pulseLogsMeta(
    @graphql.Args() args: PulseLogCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PulseLog])
  async pulseLogs(
    @graphql.Args() args: PulseLogFindManyArgs
  ): Promise<PulseLog[]> {
    return this.service.pulseLogs(args);
  }

  @graphql.Query(() => PulseLog, { nullable: true })
  async pulseLog(
    @graphql.Args() args: PulseLogFindUniqueArgs
  ): Promise<PulseLog | null> {
    const result = await this.service.pulseLog(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PulseLog)
  async createPulseLog(
    @graphql.Args() args: CreatePulseLogArgs
  ): Promise<PulseLog> {
    return await this.service.createPulseLog({
      ...args,
      data: {
        ...args.data,

        sensor: args.data.sensor
          ? {
              connect: args.data.sensor,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => PulseLog)
  async updatePulseLog(
    @graphql.Args() args: UpdatePulseLogArgs
  ): Promise<PulseLog | null> {
    try {
      return await this.service.updatePulseLog({
        ...args,
        data: {
          ...args.data,

          sensor: args.data.sensor
            ? {
                connect: args.data.sensor,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PulseLog)
  async deletePulseLog(
    @graphql.Args() args: DeletePulseLogArgs
  ): Promise<PulseLog | null> {
    try {
      return await this.service.deletePulseLog(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Sensor, {
    nullable: true,
    name: "sensor",
  })
  async getSensor(@graphql.Parent() parent: PulseLog): Promise<Sensor | null> {
    const result = await this.service.getSensor(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
