/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PulseLog as PrismaPulseLog,
  Sensor as PrismaSensor,
} from "@prisma/client";

export class PulseLogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PulseLogCountArgs, "select">): Promise<number> {
    return this.prisma.pulseLog.count(args);
  }

  async pulseLogs(
    args: Prisma.PulseLogFindManyArgs
  ): Promise<PrismaPulseLog[]> {
    return this.prisma.pulseLog.findMany(args);
  }
  async pulseLog(
    args: Prisma.PulseLogFindUniqueArgs
  ): Promise<PrismaPulseLog | null> {
    return this.prisma.pulseLog.findUnique(args);
  }
  async createPulseLog(
    args: Prisma.PulseLogCreateArgs
  ): Promise<PrismaPulseLog> {
    return this.prisma.pulseLog.create(args);
  }
  async updatePulseLog(
    args: Prisma.PulseLogUpdateArgs
  ): Promise<PrismaPulseLog> {
    return this.prisma.pulseLog.update(args);
  }
  async deletePulseLog(
    args: Prisma.PulseLogDeleteArgs
  ): Promise<PrismaPulseLog> {
    return this.prisma.pulseLog.delete(args);
  }

  async getSensor(parentId: string): Promise<PrismaSensor | null> {
    return this.prisma.pulseLog
      .findUnique({
        where: { id: parentId },
      })
      .sensor();
  }
}
