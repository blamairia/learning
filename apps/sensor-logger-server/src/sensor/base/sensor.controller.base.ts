/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SensorService } from "../sensor.service";
import { SensorCreateInput } from "./SensorCreateInput";
import { Sensor } from "./Sensor";
import { SensorFindManyArgs } from "./SensorFindManyArgs";
import { SensorWhereUniqueInput } from "./SensorWhereUniqueInput";
import { SensorUpdateInput } from "./SensorUpdateInput";
import { FlowRateFindManyArgs } from "../../flowRate/base/FlowRateFindManyArgs";
import { FlowRate } from "../../flowRate/base/FlowRate";
import { FlowRateWhereUniqueInput } from "../../flowRate/base/FlowRateWhereUniqueInput";
import { PulseLogFindManyArgs } from "../../pulseLog/base/PulseLogFindManyArgs";
import { PulseLog } from "../../pulseLog/base/PulseLog";
import { PulseLogWhereUniqueInput } from "../../pulseLog/base/PulseLogWhereUniqueInput";
import { VolumeFindManyArgs } from "../../volume/base/VolumeFindManyArgs";
import { Volume } from "../../volume/base/Volume";
import { VolumeWhereUniqueInput } from "../../volume/base/VolumeWhereUniqueInput";

export class SensorControllerBase {
  constructor(protected readonly service: SensorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Sensor })
  async createSensor(@common.Body() data: SensorCreateInput): Promise<Sensor> {
    return await this.service.createSensor({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        pin: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Sensor] })
  @ApiNestedQuery(SensorFindManyArgs)
  async sensors(@common.Req() request: Request): Promise<Sensor[]> {
    const args = plainToClass(SensorFindManyArgs, request.query);
    return this.service.sensors({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        pin: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Sensor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async sensor(
    @common.Param() params: SensorWhereUniqueInput
  ): Promise<Sensor | null> {
    const result = await this.service.sensor({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        pin: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Sensor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSensor(
    @common.Param() params: SensorWhereUniqueInput,
    @common.Body() data: SensorUpdateInput
  ): Promise<Sensor | null> {
    try {
      return await this.service.updateSensor({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          pin: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Sensor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSensor(
    @common.Param() params: SensorWhereUniqueInput
  ): Promise<Sensor | null> {
    try {
      return await this.service.deleteSensor({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          pin: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/flowRates")
  @ApiNestedQuery(FlowRateFindManyArgs)
  async findFlowRates(
    @common.Req() request: Request,
    @common.Param() params: SensorWhereUniqueInput
  ): Promise<FlowRate[]> {
    const query = plainToClass(FlowRateFindManyArgs, request.query);
    const results = await this.service.findFlowRates(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        rate: true,

        sensor: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/flowRates")
  async connectFlowRates(
    @common.Param() params: SensorWhereUniqueInput,
    @common.Body() body: FlowRateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      flowRates: {
        connect: body,
      },
    };
    await this.service.updateSensor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/flowRates")
  async updateFlowRates(
    @common.Param() params: SensorWhereUniqueInput,
    @common.Body() body: FlowRateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      flowRates: {
        set: body,
      },
    };
    await this.service.updateSensor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/flowRates")
  async disconnectFlowRates(
    @common.Param() params: SensorWhereUniqueInput,
    @common.Body() body: FlowRateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      flowRates: {
        disconnect: body,
      },
    };
    await this.service.updateSensor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/pulseLogs")
  @ApiNestedQuery(PulseLogFindManyArgs)
  async findPulseLogs(
    @common.Req() request: Request,
    @common.Param() params: SensorWhereUniqueInput
  ): Promise<PulseLog[]> {
    const query = plainToClass(PulseLogFindManyArgs, request.query);
    const results = await this.service.findPulseLogs(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        pulseCount: true,

        sensor: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/pulseLogs")
  async connectPulseLogs(
    @common.Param() params: SensorWhereUniqueInput,
    @common.Body() body: PulseLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pulseLogs: {
        connect: body,
      },
    };
    await this.service.updateSensor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/pulseLogs")
  async updatePulseLogs(
    @common.Param() params: SensorWhereUniqueInput,
    @common.Body() body: PulseLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pulseLogs: {
        set: body,
      },
    };
    await this.service.updateSensor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/pulseLogs")
  async disconnectPulseLogs(
    @common.Param() params: SensorWhereUniqueInput,
    @common.Body() body: PulseLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pulseLogs: {
        disconnect: body,
      },
    };
    await this.service.updateSensor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/volumes")
  @ApiNestedQuery(VolumeFindManyArgs)
  async findVolumes(
    @common.Req() request: Request,
    @common.Param() params: SensorWhereUniqueInput
  ): Promise<Volume[]> {
    const query = plainToClass(VolumeFindManyArgs, request.query);
    const results = await this.service.findVolumes(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        sensor: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,
        volume: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/volumes")
  async connectVolumes(
    @common.Param() params: SensorWhereUniqueInput,
    @common.Body() body: VolumeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      volumes: {
        connect: body,
      },
    };
    await this.service.updateSensor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/volumes")
  async updateVolumes(
    @common.Param() params: SensorWhereUniqueInput,
    @common.Body() body: VolumeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      volumes: {
        set: body,
      },
    };
    await this.service.updateSensor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/volumes")
  async disconnectVolumes(
    @common.Param() params: SensorWhereUniqueInput,
    @common.Body() body: VolumeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      volumes: {
        disconnect: body,
      },
    };
    await this.service.updateSensor({
      where: params,
      data,
      select: { id: true },
    });
  }
}
