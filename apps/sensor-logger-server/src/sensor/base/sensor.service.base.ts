/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Sensor as PrismaSensor,
  FlowRate as PrismaFlowRate,
  PulseLog as PrismaPulseLog,
  Volume as PrismaVolume,
} from "@prisma/client";

export class SensorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SensorCountArgs, "select">): Promise<number> {
    return this.prisma.sensor.count(args);
  }

  async sensors(args: Prisma.SensorFindManyArgs): Promise<PrismaSensor[]> {
    return this.prisma.sensor.findMany(args);
  }
  async sensor(
    args: Prisma.SensorFindUniqueArgs
  ): Promise<PrismaSensor | null> {
    return this.prisma.sensor.findUnique(args);
  }
  async createSensor(args: Prisma.SensorCreateArgs): Promise<PrismaSensor> {
    return this.prisma.sensor.create(args);
  }
  async updateSensor(args: Prisma.SensorUpdateArgs): Promise<PrismaSensor> {
    return this.prisma.sensor.update(args);
  }
  async deleteSensor(args: Prisma.SensorDeleteArgs): Promise<PrismaSensor> {
    return this.prisma.sensor.delete(args);
  }

  async findFlowRates(
    parentId: string,
    args: Prisma.FlowRateFindManyArgs
  ): Promise<PrismaFlowRate[]> {
    return this.prisma.sensor
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .flowRates(args);
  }

  async findPulseLogs(
    parentId: string,
    args: Prisma.PulseLogFindManyArgs
  ): Promise<PrismaPulseLog[]> {
    return this.prisma.sensor
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .pulseLogs(args);
  }

  async findVolumes(
    parentId: string,
    args: Prisma.VolumeFindManyArgs
  ): Promise<PrismaVolume[]> {
    return this.prisma.sensor
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .volumes(args);
  }
}
