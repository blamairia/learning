/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Volume } from "./Volume";
import { VolumeCountArgs } from "./VolumeCountArgs";
import { VolumeFindManyArgs } from "./VolumeFindManyArgs";
import { VolumeFindUniqueArgs } from "./VolumeFindUniqueArgs";
import { CreateVolumeArgs } from "./CreateVolumeArgs";
import { UpdateVolumeArgs } from "./UpdateVolumeArgs";
import { DeleteVolumeArgs } from "./DeleteVolumeArgs";
import { Sensor } from "../../sensor/base/Sensor";
import { VolumeService } from "../volume.service";
@graphql.Resolver(() => Volume)
export class VolumeResolverBase {
  constructor(protected readonly service: VolumeService) {}

  async _volumesMeta(
    @graphql.Args() args: VolumeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Volume])
  async volumes(@graphql.Args() args: VolumeFindManyArgs): Promise<Volume[]> {
    return this.service.volumes(args);
  }

  @graphql.Query(() => Volume, { nullable: true })
  async volume(
    @graphql.Args() args: VolumeFindUniqueArgs
  ): Promise<Volume | null> {
    const result = await this.service.volume(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Volume)
  async createVolume(@graphql.Args() args: CreateVolumeArgs): Promise<Volume> {
    return await this.service.createVolume({
      ...args,
      data: {
        ...args.data,

        sensor: args.data.sensor
          ? {
              connect: args.data.sensor,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Volume)
  async updateVolume(
    @graphql.Args() args: UpdateVolumeArgs
  ): Promise<Volume | null> {
    try {
      return await this.service.updateVolume({
        ...args,
        data: {
          ...args.data,

          sensor: args.data.sensor
            ? {
                connect: args.data.sensor,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Volume)
  async deleteVolume(
    @graphql.Args() args: DeleteVolumeArgs
  ): Promise<Volume | null> {
    try {
      return await this.service.deleteVolume(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Sensor, {
    nullable: true,
    name: "sensor",
  })
  async getSensor(@graphql.Parent() parent: Volume): Promise<Sensor | null> {
    const result = await this.service.getSensor(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
