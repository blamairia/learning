/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VolumeService } from "../volume.service";
import { VolumeCreateInput } from "./VolumeCreateInput";
import { Volume } from "./Volume";
import { VolumeFindManyArgs } from "./VolumeFindManyArgs";
import { VolumeWhereUniqueInput } from "./VolumeWhereUniqueInput";
import { VolumeUpdateInput } from "./VolumeUpdateInput";

export class VolumeControllerBase {
  constructor(protected readonly service: VolumeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Volume })
  async createVolume(@common.Body() data: VolumeCreateInput): Promise<Volume> {
    return await this.service.createVolume({
      data: {
        ...data,

        sensor: data.sensor
          ? {
              connect: data.sensor,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        sensor: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,
        volume: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Volume] })
  @ApiNestedQuery(VolumeFindManyArgs)
  async volumes(@common.Req() request: Request): Promise<Volume[]> {
    const args = plainToClass(VolumeFindManyArgs, request.query);
    return this.service.volumes({
      ...args,
      select: {
        createdAt: true,
        id: true,

        sensor: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,
        volume: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Volume })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async volume(
    @common.Param() params: VolumeWhereUniqueInput
  ): Promise<Volume | null> {
    const result = await this.service.volume({
      where: params,
      select: {
        createdAt: true,
        id: true,

        sensor: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,
        volume: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Volume })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVolume(
    @common.Param() params: VolumeWhereUniqueInput,
    @common.Body() data: VolumeUpdateInput
  ): Promise<Volume | null> {
    try {
      return await this.service.updateVolume({
        where: params,
        data: {
          ...data,

          sensor: data.sensor
            ? {
                connect: data.sensor,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          sensor: {
            select: {
              id: true,
            },
          },

          timestamp: true,
          updatedAt: true,
          volume: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Volume })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVolume(
    @common.Param() params: VolumeWhereUniqueInput
  ): Promise<Volume | null> {
    try {
      return await this.service.deleteVolume({
        where: params,
        select: {
          createdAt: true,
          id: true,

          sensor: {
            select: {
              id: true,
            },
          },

          timestamp: true,
          updatedAt: true,
          volume: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
